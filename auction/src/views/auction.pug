extends layout

block good
  h2= good.name
  img(src='/img/' + good.img)
  div= '등록자: ' + good.owner.nick
  div= '시작가: ' + good.price
  strong#time(data-start=good.createdAt)

block content
  .timeline
    #bid
      for bid in auction
        div
          span= bid.user.nick + '님'
          strong= bid.bid + '원에 입찰하셨습니다.'
          if bid.msg
            span= '(' + bid.msg + ')'
    form#bid-form
      input(type="number" name='bid' placeholder='입찰가' required min=good.price)
      input(type="msg" name='msg' placeholder='메세지' maxlength='100')
      button(type='submit') 입찰
    if auctionError
      .error-message= auctionError
  script(src="https://cdnjs.cloudflare.com/ajax/libs/event-source-polyfill/0.0.9/eventsource.min.js")
  script(src='/socket.io/socket.io.js')
  script.
    document.querySelector("#bid-form").addEventListener('submit', (e) => {
      e.preventDefault();
      let xhr = new XMLHttpRequest();
      let errorMessage = document.querySelector('.error-message');
      xhr.onload = () => {
        if (xhr.status === 200) {
          e.target.bid = '';
          e.target.name = '';
          errorMessage.textContent = '';
        } else {
          e.target.bid = '';
          e.target.name = '';
          errorMessage.textContent = xhr.responseText;
          console.error(xhr.responseText);
        }
      };
      xhr.open('POST', `/good/#{good.id}/bid`);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(JSON.stringify({bid: e.target.bid.value, msg: e.target.msg.value}));
    });

    const es = new EventSource('/sse');
    const time = document.querySelector('#time');
    es.onmessage = (e) => {
      const end = new Date(time.dataset.start);
      const server = new Date(parseInt(e.data, 10));
      end.setDate(end.getDate() + 1);
      if (server >= end) {
        return time.textContent = '00:00:00';
      } else {
        const t = end - server;
        const hours = Math.floor(t / 1000 / 60 / 60);
        const minutes = ('0' + Math.floor((t / 1000 / 60) % 60)).slice(-2);
        const seconds = ('0' + Math.floor((t / 1000) % 60)).slice(-2);
        return time.textContent = `${hours}:${minutes}:${seconds}`;
      }
    };

    const socket = io.connect('http://localhost:8000', {
      path: '/socket.io',
    })
    socket.on('bid', data => {
      let div = document.createElement('div');
      let span = document.createElement('span');
      span.textContent = data.nick + '님';
      let strong = document.createElement('strong');
      strong.textContent = data.bid + '원에 입찰했습니다.';
      div.appendChild(span);
      div.appendChild(strong);
      if (data.msg) {
        span = document.createElement('span');
        span.textContent = '(' + data.msg + ')';
        div.appendChild(span);
      }
      document.querySelector('#bid').appendChild(div);
    });


